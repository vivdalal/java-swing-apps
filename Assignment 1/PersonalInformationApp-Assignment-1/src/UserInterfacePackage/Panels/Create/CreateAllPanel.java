/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterfacePackage.Panels.Create;

import BusinessPackage.Person;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author vivekdalal
 */
public class CreateAllPanel extends javax.swing.JPanel {

    private static List<String> stateList = new ArrayList<String>();

    static {
        //List of states in the United States.
        stateList.addAll(Arrays.asList("AL", "AK", "AZ", "AR", "AA", "AE", "AP", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME",
                "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA",
                "WV", "WI", "WY"));
    }

    private Person person;

    /**
     * Creates new form CreateAllPanel
     */
    public CreateAllPanel() {
        initComponents();
    }

    public CreateAllPanel(Person person) {

        //Parameterized constructor for CreatePanle
        //initialzing all the components
        initComponents();
        //Setting the person passed from Main Frame to Create Panel
        this.person = person;

        //Initializing the state dropdown from a static list
        for (String state : stateList) {
            stateComboBox.addItem(state);
        }
        stateComboBox.setSelectedIndex(0);

        //Initializing the combo box for Age(1-150)
        for (int i = 1; i < 150; i++) {
            ageComboBoxFld.addItem(Integer.toString(i));
        }
        ageComboBoxFld.setSelectedIndex(0);

        //Initializing the combo box foer account type
        acctTypComboBox.addItem("Savings");
        acctTypComboBox.addItem("Checking");
        acctTypComboBox.setSelectedIndex(0);

        //Setting the File path field to Non-editable so that user cannot enter Junk data.
        filePathForImageFld.setEnabled(false);

    }

    //Method to scale the image and fit it in a prefixed size so that it looks good on the Interface
    public static BufferedImage scaleImage(int w, int h, BufferedImage img) throws Exception {

        BufferedImage bi;
        bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(img, 0, 0, w, h, null);
        g2d.dispose();
        return bi;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        fnTxtFLd = new javax.swing.JTextField();
        lnTxtFLd = new javax.swing.JTextField();
        pnTxtFLd = new javax.swing.JTextField();
        dobTxtFLd = new javax.swing.JTextField();
        ssnTxtFLd = new javax.swing.JTextField();
        wghtTxtFLd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        hghtTxtFLd = new javax.swing.JTextField();
        addrLn1Fld = new javax.swing.JTextField();
        addrLn2Fld = new javax.swing.JTextField();
        cityFld = new javax.swing.JTextField();
        zipcodeFld = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        routingNmFld = new javax.swing.JTextField();
        bankNmFld = new javax.swing.JTextField();
        acctNmFld = new javax.swing.JTextField();
        acctBalFld = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        dlNumFld = new javax.swing.JTextField();
        dtIssuedFld = new javax.swing.JTextField();
        dtExpiryFld = new javax.swing.JTextField();
        bloodTypFld = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        rcrdNumFld = new javax.swing.JTextField();
        alergy1Fld = new javax.swing.JTextField();
        alergy2Fld = new javax.swing.JTextField();
        alergy3Fld = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        createAllBtn = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        ageComboBoxFld = new javax.swing.JComboBox<>();
        stateComboBox = new javax.swing.JComboBox<>();
        acctTypComboBox = new javax.swing.JComboBox<>();
        imageUploadSpaceLbl = new javax.swing.JLabel();
        uploadImageBtn = new javax.swing.JButton();
        filePathForImageFld = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 255, 204));
        setBounds(new java.awt.Rectangle(0, 0, 855, 1252));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(855, 1252));

        jScrollPane1.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(855, 1171));
        jScrollPane1.setSize(new java.awt.Dimension(855, 1171));

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(855, 1171));
        jPanel1.setSize(new java.awt.Dimension(855, 1171));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(fnTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 72, 200, -1));

        lnTxtFLd.setPreferredSize(new java.awt.Dimension(10, 200));
        lnTxtFLd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnTxtFLdActionPerformed(evt);
            }
        });
        jPanel1.add(lnTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 73, 212, 24));
        jPanel1.add(pnTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 200, -1));
        jPanel1.add(dobTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 154, 200, -1));
        jPanel1.add(ssnTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 198, 200, -1));
        jPanel1.add(wghtTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 188, 200, -1));

        jLabel1.setText("First Name");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 77, 97, -1));

        jLabel2.setText("Last Name");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(442, 77, 97, -1));

        jLabel3.setText("Phone Number");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 115, 97, -1));

        jLabel4.setText("Date of Birth");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 159, 97, -1));

        jLabel5.setText("SSN");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 203, 97, -1));

        jLabel6.setText("Age");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 110, 97, -1));

        jLabel7.setText("Height");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 149, 97, -1));

        jLabel8.setText("Weight");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 188, 97, -1));
        jPanel1.add(hghtTxtFLd, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 144, 200, -1));
        jPanel1.add(addrLn1Fld, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 270, 202, -1));
        jPanel1.add(addrLn2Fld, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 314, 202, -1));
        jPanel1.add(cityFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 360, 202, -1));
        jPanel1.add(zipcodeFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 404, 202, -1));

        jLabel9.setText("Address Line 1");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 275, -1, -1));

        jLabel10.setText("Address Line 2");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 314, -1, -1));

        jLabel11.setText("City");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 360, -1, -1));

        jLabel12.setText("Zip Code");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 409, -1, -1));

        jLabel13.setText("State");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 453, -1, -1));
        jPanel1.add(routingNmFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(179, 592, 201, -1));
        jPanel1.add(bankNmFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(179, 538, 201, -1));
        jPanel1.add(acctNmFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(179, 641, 201, -1));
        jPanel1.add(acctBalFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(578, 582, 182, 47));

        jLabel14.setText("Bank Name");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 543, -1, -1));

        jLabel15.setText("Routing Number");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 597, -1, -1));

        jLabel16.setText("Account Number");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 646, -1, -1));

        jLabel17.setText("Account Type");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 543, -1, -1));

        jLabel18.setText("Account Balance");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 597, -1, -1));

        dlNumFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlNumFldActionPerformed(evt);
            }
        });
        jPanel1.add(dlNumFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 719, 200, -1));

        dtIssuedFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtIssuedFldActionPerformed(evt);
            }
        });
        jPanel1.add(dtIssuedFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 763, 200, -1));

        dtExpiryFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtExpiryFldActionPerformed(evt);
            }
        });
        jPanel1.add(dtExpiryFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 807, 200, -1));

        bloodTypFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodTypFldActionPerformed(evt);
            }
        });
        jPanel1.add(bloodTypFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 851, 200, -1));
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 719, -1, -1));

        jLabel20.setText("Date of Issue");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 768, -1, -1));

        jLabel21.setText("Date of Expiry");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 812, -1, -1));

        jLabel22.setText("Blood Type");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 856, -1, -1));
        jPanel1.add(rcrdNumFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 960, 200, -1));
        jPanel1.add(alergy1Fld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 1000, 399, -1));
        jPanel1.add(alergy2Fld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 1040, 399, -1));
        jPanel1.add(alergy3Fld, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 1090, 399, -1));

        jLabel23.setText("Record Number");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 960, -1, -1));

        jLabel24.setText("Alergy 1");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 1010, -1, -1));

        jLabel25.setText("Alergy 2");
        jPanel1.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 1050, -1, -1));

        jLabel26.setText("Alergy 3");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 1090, -1, -1));

        createAllBtn.setBackground(new java.awt.Color(255, 255, 204));
        createAllBtn.setText("Create");
        createAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAllBtnActionPerformed(evt);
            }
        });
        jPanel1.add(createAllBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 1130, 373, 39));

        jLabel27.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        jLabel27.setText("Personal Information ");
        jLabel27.setAutoscrolls(true);
        jPanel1.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(314, 0, -1, 32));

        jLabel28.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel28.setText("Demographic Information");
        jLabel28.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 38, -1, -1));

        jLabel29.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel29.setText("Address Information");
        jLabel29.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 230, -1, -1));

        jLabel30.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel30.setText("Account Information");
        jLabel30.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 504, -1, -1));

        jLabel31.setText("License No");
        jPanel1.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 724, -1, -1));

        jLabel32.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel32.setText("Driving License Information");
        jLabel32.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 685, -1, -1));

        jLabel33.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel33.setText("Medical Records");
        jLabel33.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 920, -1, -1));

        ageComboBoxFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageComboBoxFldActionPerformed(evt);
            }
        });
        jPanel1.add(ageComboBoxFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 110, -1, -1));

        stateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(stateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 450, -1, -1));

        jPanel1.add(acctTypComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 540, -1, -1));

        imageUploadSpaceLbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(imageUploadSpaceLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 770, 120, 120));

        uploadImageBtn.setText("Browse File");
        uploadImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadImageBtnActionPerformed(evt);
            }
        });
        jPanel1.add(uploadImageBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 720, -1, -1));
        jPanel1.add(filePathForImageFld, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 720, 220, -1));

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1232, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lnTxtFLdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnTxtFLdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lnTxtFLdActionPerformed

    private void dlNumFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlNumFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dlNumFldActionPerformed

    private void dtIssuedFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtIssuedFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dtIssuedFldActionPerformed

    private void dtExpiryFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtExpiryFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dtExpiryFldActionPerformed

    private void bloodTypFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodTypFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodTypFldActionPerformed

    private void createAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAllBtnActionPerformed
        try {

            //Creating all the objects which we need to populate
            //Create all Objects and check for any validation errors
            //Demographic Information
            //####################################
            if (isValidString(fnTxtFLd.getText())) {
                person.getPersonalInfo().setFirstName(fnTxtFLd.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "First Name is Invalid. It shold only contain text. Please check.");
                throw new Exception();
            }

            if (isValidString(lnTxtFLd.getText())) {
                person.getPersonalInfo().setLastName(lnTxtFLd.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Last Name is Invalid. It should only contain text. Please check.");
                throw new Exception();
            }

            person.getPersonalInfo().setAge(ageComboBoxFld.getSelectedIndex());

            if (isValidNum(pnTxtFLd.getText()) && checkStrLen(pnTxtFLd.getText(), 10)) {
                person.getPersonalInfo().setPhoneNum(pnTxtFLd.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Phone Number is Invalid. It should be numeric and 10 in length. Please check.");
                throw new Exception();
            }

            if (checkDateFormat(dobTxtFLd.getText())) {
                person.getPersonalInfo().setDateOfBirth(dobTxtFLd.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Date of Birth is Invalid.  Please enter date in dd/mm/yyyy format");
                throw new Exception();
            }

            if (isValidNum(ssnTxtFLd.getText()) && checkStrLen(ssnTxtFLd.getText(), 9)) {
                person.getPersonalInfo().setSSN(Integer.parseInt(ssnTxtFLd.getText()));
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "SSN is Invalid. It should be a combination of digits and of length 9. Please check.");
                throw new Exception();
            }

            if (isValidDouble(hghtTxtFLd.getText())) {
                person.getPersonalInfo().setHeight(Double.parseDouble(hghtTxtFLd.getText()));
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Height is Invalid. It should be a decimal number. Please check.");
                throw new Exception();
            }

            if (isValidDouble(wghtTxtFLd.getText())) {
                person.getPersonalInfo().setWeight(Double.parseDouble(wghtTxtFLd.getText()));
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Weight is Invalid. It should be a decimal number. Please check.");
                throw new Exception();

            }

            //Address Info
            //####################################
            if (isValidData(addrLn1Fld.getText())) {
                person.getAddress().setAddrLn1(addrLn1Fld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Address Line 1 is Invalid. Please check.");
                throw new Exception();
            }

            if (isValidData(addrLn2Fld.getText())) {
                person.getAddress().setAddrLn2(addrLn2Fld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Address Line 2 is Invalid. Please check.");
                throw new Exception();
            }

            if (isValidString(cityFld.getText())) {
                person.getAddress().setCity(cityFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "City is Invalid. It should be text. Please check.");
                throw new Exception();
            }

            if (isValidNum(zipcodeFld.getText()) && checkStrLen(zipcodeFld.getText(), 5)) {
                person.getAddress().setZipCd(zipcodeFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "ZipCode is Invalid. It should be 5 digits only. Please check.");
                throw new Exception();
            }

            person.getAddress().setState(stateComboBox.getSelectedItem().toString());

            //Account Info
            //####################################
            if (isValidData(bankNmFld.getText())) {
                person.getAccountInfo().setBankName(bankNmFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Bank Name is Invalid. Please check.");
                throw new Exception();
            }

            //Should this be an integer?
            if (isValidData(routingNmFld.getText())) {
                person.getAccountInfo().setRoutingNum(routingNmFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Routing Number is Invalid. Please check.");
                throw new Exception();
            }

            if (isValidNum(acctNmFld.getText())) {
                person.getAccountInfo().setAcctNum(acctNmFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Account Number is Invalid.It should be numeric and not text. Please check.");
                throw new Exception();
            }

            if (isValidDouble(acctBalFld.getText())) {
                person.getAccountInfo().setAcctBal(Double.parseDouble(acctBalFld.getText()));
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Account Balance is Invalid. It should be a decimal number and not text. Please check.");
                throw new Exception();
            }

            person.getAccountInfo().setAcctTyp(acctTypComboBox.getSelectedItem().toString());

            //Driving License Info
            //####################################
            if (isValidData(dlNumFld.getText())) {
                person.getDriverLicenseInfo().setLicenseNum(dlNumFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Driving License Number is Invalid. Please check.");
                throw new Exception();
            }

            if (checkDateFormat(dtIssuedFld.getText())) {
                person.getDriverLicenseInfo().setDateIssued(dtIssuedFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Date Issued is Invalid. Please enter date in dd/mm/yyyy format");
                throw new Exception();
            }

            if (checkDateFormat(dtExpiryFld.getText())) {
                person.getDriverLicenseInfo().setDateExpiry(dtExpiryFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Date of Expiry is Invalid. Please enter date in dd/mm/yyyy format");
                throw new Exception();
            }

            if (isValidData(bloodTypFld.getText())) {
                person.getDriverLicenseInfo().setBloodTyp(bloodTypFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Blood Type is Invalid. Please check.");
                throw new Exception();
            }

            //Saving the image path from the text field
            if (isValidPath(filePathForImageFld.getText())) {
                person.getDriverLicenseInfo().setImagePathOnDisc(filePathForImageFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Image selected is Invalid. Please check.");
                throw new Exception();
            }

            //Medical Records
            //####################################
            if (isValidNum(rcrdNumFld.getText())) {
                person.getMedicalRecord().setRecordNum(rcrdNumFld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Record Number is Invalid. It must be numeric. Please check.");
                throw new Exception();
            }

            if (isValidData(alergy1Fld.getText())) {
                person.getMedicalRecord().setAlergy1(alergy1Fld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Alergy 1 is Invalid. It should be a text. Please check.");
                throw new Exception();
            }

            if (isValidData(alergy2Fld.getText())) {
                person.getMedicalRecord().setAlergy2(alergy2Fld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Alergy 2 is Invalid. It should be a text. Please check.");
                throw new Exception();
            }

            if (isValidData(alergy3Fld.getText())) {
                person.getMedicalRecord().setAlergy3(alergy3Fld.getText());
            } else {
                //Show the error via a pop window
                JOptionPane.showMessageDialog(this, "Alergy 3 is Invalid. It should be a text. Please check.");
                throw new Exception();
            }

            JOptionPane.showMessageDialog(this, "Data Submitted successfully.");

        } catch (Exception e) {
            //Something went wrong. So breaking the normal flow and not creating the objects.
            JOptionPane.showMessageDialog(this, "Data submission failed due to validation error.");
        }
    }//GEN-LAST:event_createAllBtnActionPerformed

    private void ageComboBoxFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageComboBoxFldActionPerformed
        //
    }//GEN-LAST:event_ageComboBoxFldActionPerformed

    private void stateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stateComboBoxActionPerformed

    private void uploadImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadImageBtnActionPerformed
        //Code to upload image
        //File chooser will open a pop window where the user will be allowed to Select the Image file he wants to upload
        JFileChooser fileChooser = new JFileChooser();
        //Text to show on the top of the File Chooser Dailog Box
        fileChooser.setDialogTitle("Select an image");
        fileChooser.setAcceptAllFileFilterUsed(false);
        //Added File extenstion filters so that the user can only uipload images which the running JRE version can understand
        FileFilter imageFilter = new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes());
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG and GIF images", "png", "gif");
        fileChooser.addChoosableFileFilter(imageFilter);

        fileChooser.showOpenDialog(null);

        File f = fileChooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        filePathForImageFld.setText(fileName);
        try {
            ImageIcon ii = new ImageIcon(scaleImage(120, 120, ImageIO.read(new File(f.getAbsolutePath()))));//get the image from file chooser and fit it to match Label size
            imageUploadSpaceLbl.setIcon(ii);
        } catch (Exception e) {
            //Printing the exception so that we can analyze the issue.
            e.printStackTrace();
        }
    }//GEN-LAST:event_uploadImageBtnActionPerformed

    //Validation methods for String input type in input on the form.
    private boolean isValidString(String str) {
        if (null != str && str.length() > 0) {
            //Checking whether the string contains only characters and no numbers
            return str.chars().allMatch(Character::isLetter);
        } else {
            return false;
        }
    }

    //Validation methods for all different types of input on the form.
    private boolean isValidData(String str) {
        if (null != str && str.length() > 0) {
            //Checking whether the string contains only characters and no numbers
            return true;
        } else {
            return false;
        }
    }

    //Validation methods for Number (int) datatype of input on the form.
    private boolean isValidNum(String str) {
        if (null != str && str.length() > 0) {
            return str.chars().allMatch(Character::isDigit);

        } else {
            return false;
        }
    }

    //Validation methods for Image File Path
    private boolean isValidPath(String str) {
        if (null != str && str.length() > 0) {
            return true;
        } else {
            return false;
        }
    }

    //Validation methods for all Decimal Numbers(Double) of Input on the form
    private boolean isValidDouble(String str) {
        if (null != str && str.length() > 0) {
            try {
                Double.parseDouble(str);
                return true;
            } catch (NumberFormatException numberFormatException) {
                numberFormatException.printStackTrace();
                return false;
            }

        } else {
            return false;
        }
    }

    //Checking the date format inputed on the screen
    private boolean checkDateFormat(String str) {
        //String test = "02/01/20";
        //Check if date is null or empty
        if (str == null || str.isEmpty()) {
            return false;
        }

        String format = "dd/MM/yyyy";
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        sdf.setLenient(false);
        try {
            Date date = sdf.parse(str);
            if (!sdf.format(date).equals(str)) {
                throw new ParseException(str + " is not a valid format for " + format, 0);
            }
            return true;
        } catch (ParseException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    //Checking the length of the string passed in the input field
    public boolean checkStrLen(String str, int len) {
        //Phone length should be exactly 10
        return str.length() == len;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField acctBalFld;
    private javax.swing.JTextField acctNmFld;
    private javax.swing.JComboBox<String> acctTypComboBox;
    private javax.swing.JTextField addrLn1Fld;
    private javax.swing.JTextField addrLn2Fld;
    private javax.swing.JComboBox<String> ageComboBoxFld;
    private javax.swing.JTextField alergy1Fld;
    private javax.swing.JTextField alergy2Fld;
    private javax.swing.JTextField alergy3Fld;
    private javax.swing.JTextField bankNmFld;
    private javax.swing.JTextField bloodTypFld;
    private javax.swing.JTextField cityFld;
    private javax.swing.JButton createAllBtn;
    private javax.swing.JTextField dlNumFld;
    private javax.swing.JTextField dobTxtFLd;
    private javax.swing.JTextField dtExpiryFld;
    private javax.swing.JTextField dtIssuedFld;
    private javax.swing.JTextField filePathForImageFld;
    private javax.swing.JTextField fnTxtFLd;
    private javax.swing.JTextField hghtTxtFLd;
    private javax.swing.JLabel imageUploadSpaceLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lnTxtFLd;
    private javax.swing.JTextField pnTxtFLd;
    private javax.swing.JTextField rcrdNumFld;
    private javax.swing.JTextField routingNmFld;
    private javax.swing.JTextField ssnTxtFLd;
    private javax.swing.JComboBox<String> stateComboBox;
    private javax.swing.JButton uploadImageBtn;
    private javax.swing.JTextField wghtTxtFLd;
    private javax.swing.JTextField zipcodeFld;
    // End of variables declaration//GEN-END:variables
}
